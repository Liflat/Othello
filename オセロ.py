# -*- coding: utf-8 -*-
"""オセロ

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orqDCA5bqNOOSGAM8CbibQM6V-ay3N0G
"""

import numpy as np
import random

class Othello:

    # ボードの初期設定
    def __init__(self, players):
        self.board = np.zeros((8, 8), dtype=int)
        self.board[3, 3] = self.board[4, 4] = 1  # 白
        self.board[3, 4] = self.board[4, 3] = 2  # 黒
        self.players = players  # 1人または2人プレイ

        # 先攻・後攻をランダムに決定
        self.current_player = random.choice([1, 2])  # 1: 白, 2: 黒
        print(f"{'黒(●)' if self.current_player == 2 else '白(○)'} が先攻です")

    # アルファベットの列の設定
    def print_board(self):
        print("    a   b   c   d   e   f   g   h")
        for i, row in enumerate(self.board):
            print(f"{i+1:2d} " + "  ".join(self.render_cell(cell) for cell in row))

    def render_cell(self, cell):
        if cell == 1:
            return "○"  # 白
        elif cell == 2:
            return "●"  # 黒
        else:
            return "・"  # 空白

    def is_valid_move(self, x, y, player):
        if self.board[x, y] != 0:
            return False

        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        opponent = 3 - player

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            flipped = False

            while 0 <= nx < 8 and 0 <= ny < 8 and self.board[nx, ny] == opponent:
                nx, ny = nx + dx, ny + dy
                flipped = True

            if flipped and 0 <= nx < 8 and 0 <= ny < 8 and self.board[nx, ny] == player:
                return True

        return False

    def get_valid_moves(self, player):
        moves = []

        for x in range(8):

            for y in range(8):

                if self.is_valid_move(x, y, player):
                    moves.append((x, y))

        return moves

    def make_move(self, x, y):

        if not self.is_valid_move(x, y, self.current_player):

            return False

        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        opponent = 3 - self.current_player
        self.board[x, y] = self.current_player

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            to_flip = []

            while 0 <= nx < 8 and 0 <= ny < 8 and self.board[nx, ny] == opponent:
                to_flip.append((nx, ny))
                nx, ny = nx + dx, ny + dy

            if 0 <= nx < 8 and 0 <= ny < 8 and self.board[nx, ny] == self.current_player:
                for fx, fy in to_flip:
                    self.board[fx, fy] = self.current_player

        self.current_player = 3 - self.current_player
        return True

    def count_pieces(self):
        white = np.sum(self.board == 1)
        black = np.sum(self.board == 2)
        return white, black

    def npc_move(self):
        valid_moves = self.get_valid_moves(self.current_player)
        return random.choice(valid_moves) if valid_moves else None

    def play_game(self):
        while True:
            self.print_board()
            valid_moves = self.get_valid_moves(self.current_player)

            if not valid_moves:
                print("パスします")
                self.current_player = 3 - self.current_player
                if not self.get_valid_moves(self.current_player):
                    print("ゲーム終了！")
                    break
                continue

            print(f"現在のプレイヤー: {'黒(●)' if self.current_player == 2 else '白(○)'}")
            print("有効な手:", ["{}{}".format(chr(y+97), x+1) for x, y in valid_moves])

            if self.players == 1 and self.current_player == 2:  # NPCの番
                print("コンピュータのターンです")
                move = self.npc_move()
                print(f"コンピュータは {chr(move[1] + 97)}{move[0] + 1} に手を打ちました")
                self.make_move(move[0], move[1])  # コンピュータが手を打つ

            else:
                # 降参するかどうかを選ばせる
                surrender = input("降参する場合は「降参」と入力してください。続ける場合は手を入力してください (例: d3): ").strip().lower()
                if surrender == "降参":
                    print(f"{'黒(●)' if self.current_player == 2 else '白(○)'} が降参しました")
                    winner = "黒(●)" if self.current_player == 1 else "白(○)"
                    print(f"{winner} の勝利！")
                    break

                # 通常の手入力
                move = input("手を入力してください (例: d3): ").strip().lower()
                if len(move) == 2 and move[0] in "abcdefgh" and move[1] in "12345678":
                    y, x = ord(move[0]) - 97, int(move[1]) - 1
                    if self.make_move(x, y):
                        continue
                print("無効な手です")

        # 降参がなければ最終スコアを表示
        if surrender != "降参":
            white, black = self.count_pieces()
            print(f"最終スコア: 白(○): {white}, 黒(●): {black}")
            if white > black:
                print("白(○)の勝利！")
            elif black > white:
                print("黒(●)の勝利！")
            else:
                print("引き分け")

# プレイヤー数を選択
players = int(input("プレイヤー人数を入力してください（1または2）: "))

if players not in [1, 2]:
    print("無効な選択肢です。1または2を選んでください")
else:
    game = Othello(players)
    game.play_game()